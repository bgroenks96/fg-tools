/*
 * Copyright © 2011 - 2013 Aaron Mahan
 * Copyright © 2013 - 2016 Forerunner Games, LLC
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.forerunnergames.tools.common.id;

import com.forerunnergames.tools.common.Classes;

import java.util.UUID;

/**
 * Provides a static interface for generating global, unique Id values. IdGen keeps and increments an AtomicInteger
 * 'tick' variable internally to guarantee that values returned by { @link #generateUniqueId() } are globally unique.
 */
public final class IdGenerator
{
  /**
   * Generates a globally unique Id value by fetching and incrementing a static, internal integer value.
   *
   * @return an Id guaranteed to be unique from others generated by this method.
   *
   * @throws IllegalStateException
   *           if the internal integer used for generating Id values exceeds Integer.MAX_VALUE.
   */
  public static Id generateUniqueId ()
  {
    return new Id (UUID.randomUUID ());
  }

  private IdGenerator ()
  {
    Classes.instantiationNotAllowed ();
  }
}
