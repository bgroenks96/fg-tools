plugins {
  id "net.researchgate.release" version "2.3.4"
  id "com.jfrog.artifactory" version "4.0.0"
  id "com.jfrog.bintray" version "1.6"
  id "com.github.ben-manes.versions" version "0.11.3"
}

import java.text.SimpleDateFormat

def globalVersion = new Version (projectVersion)

allprojects {
  repositories {
    jcenter ()
    mavenCentral ()
  }

  apply plugin: "idea"
  apply plugin: "eclipse"
  apply plugin: "com.jfrog.artifactory"
  apply plugin: "com.jfrog.bintray"
  apply plugin: "java"

  sourceCompatibility = projectSourceCompatibility
  targetCompatibility = projectTargetCompatibility

  group = projectGroup
  version = globalVersion
  status = version.status

  ext.publish = true

  artifactory {
    contextUrl = "http://oss.jfrog.org/artifactory"
    publish {
      repository {
        repoKey = "oss-snapshot-local"
        username = hasProperty ("bintrayUser") ? bintrayUser : System.getenv ("BINTRAY_USER")
        password = hasProperty ("bintrayApiKey") ? bintrayApiKey : System.getenv ("BINTRAY_API_KEY")
        maven = true
      }
      defaults {
        publishConfigs ("published", "archives")
        publishBuildInfo = true
        publishArtifacts = true
        publishPom = true
        publishIvy = false
      }
    }
    clientConfig.includeEnvVars = true
    if (System.getenv ("TRAVIS")) {
      clientConfig.info.buildNumber = System.getenv ("TRAVIS_BUILD_NUMBER")
      clientConfig.info.vcsRevision = System.getenv ("TRAVIS_COMMIT")
    }
  }

  bintray {
    user = hasProperty ("bintrayUser") ? bintrayUser : System.getenv ("BINTRAY_USER")
    key = hasProperty ("bintrayApiKey") ? bintrayApiKey : System.getenv ("BINTRAY_API_KEY")
    configurations = ["published", "archives"]
    pkg {
      repo = "repository"
      name = "fg-tools"
      desc = "Simple utility library for Java game development"
      userOrg = "forerunnergames"
      websiteUrl = "https://github.com/forerunnergames/fg-tools"
      issueTrackerUrl = "https://github.com/forerunnergames/fg-tools/issues"
      vcsUrl = "https://github.com/forerunnergames/fg-tools.git"
      licenses = ["MIT"]
      publicDownloadNumbers = true
    }
  }
}

artifactoryPublish.skip = true
bintrayUpload.enabled = false

subprojects {
  apply plugin: "maven"
  apply plugin: "net.researchgate.release"

  dependencies {
    testCompile "org.hamcrest:hamcrest-all:1.3"
    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-core:1.9.5"
    testRuntime "ch.qos.logback:logback-classic:1.1.3"
  }

  configurations {
    published
  }

  tasks.withType (Jar) {
    archivesBaseName = "$rootProject.name-$project.name"
  }

  task sourcesJar (type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
  }

  task javadocJar (type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    javadoc.options.links ("http://docs.oracle.com/javase/7/docs/api/");
    from javadoc.destinationDir
  }

  artifactoryPublish {
    dependsOn sourcesJar, javadocJar
  }

  artifacts {
    published sourcesJar
    published javadocJar
  }

  release {
    failOnCommitNeeded = true
    failOnPublishNeeded = true
    failOnSnapshotDependencies = true
    failOnUnversionedFiles = true
    failOnUpdateNeeded = true
    revertOnFail = true
    git {
      requireBranch = "master"
      pushToRemote = "origin"
    }
  }
}

configurations {
  published
}

project (":common") {
  dependencies {
    compile "com.google.guava:guava:19.0"
    compile "org.apache.commons:commons-lang3:3.4"
    compile "com.google.code.findbugs:jsr305:3.0.1"
    compile "org.slf4j:slf4j-api:1.7.13"
  }
}

project (":net") {
  dependencies {
    compile project (":common")
  }
}

task wrapper (type: Wrapper) {
  gradleVersion = "2.10"
}

tasks.artifactoryPublish.doFirst {
  assert project.status == "integration": "Only a snapshot version (not ${project.version}) can be published to Artifactory."
}

tasks.bintrayUpload.doFirst {
  assert project.status == "release": "Only a release version (not ${project.version}) can be published to Bintray."
}

createReleaseTag.dependsOn bintrayUpload

if (JavaVersion.current ().isJava8Compatible ()) {
  allprojects {
    tasks.withType (Javadoc) {
      options.addStringOption ("Xdoclint:none", "-quiet")
    }
  }
}

idea {
  project {
    languageLevel = "${projectSourceCompatibility}"
  }

  module {
    downloadJavadoc = true
    downloadSources = true
  }
}

tasks.eclipse.doLast {
  delete ".project"
}

class Version {
  String originalVersion
  String thisVersion
  String status
  Date buildTime

  Version (String versionValue) {
    buildTime = new Date ()
    originalVersion = versionValue

    if (originalVersion.endsWith ("-SNAPSHOT")) {
      status = "integration"
      thisVersion = originalVersion.substring (0, originalVersion.length () - "SNAPSHOT".length ()) + getTimestamp ()
    } else {
      status = "release"
      thisVersion = versionValue
    }
  }

  String getTimestamp () {
    // Convert local file timestamp to UTC
    def format = new SimpleDateFormat ("yyyyMMddHHmmss")
    format.setCalendar (Calendar.getInstance (TimeZone.getTimeZone ("UTC")));
    return format.format (buildTime)
  }

  String toString () {
    thisVersion
  }
}
