package com.forerunnergames.tools.common.id;

import com.forerunnergames.tools.common.Classes;

import java.util.concurrent.atomic.AtomicInteger;

/**
 * Provides a static interface for generating global, unique Id values. IdGen keeps and increments an AtomicInteger
 * 'tick' variable internally to guarantee that values returned by { @link #generateUniqueId() } are globally unique.
 */
public final class IdGenerator
{

  private static AtomicInteger globallyUniqueIdValue = createAtomicIdValue ();

  private static AtomicInteger createAtomicIdValue ()
  {
    return new AtomicInteger (Integer.MIN_VALUE + 1);
  }

  /**
   * Generates a globally unique Id value by fetching and incrementing a static, internal integer value.
   *
   * @return an Id guaranteed to be unique from others generated by this method.
   *
   * @throws IllegalStateException
   *           if the internal integer used for generating Id values exceeds Integer.MAX_VALUE.
   */
  public static Id generateUniqueId ()
  {
    final Id id = new Id (globallyUniqueIdValue.getAndIncrement ());

    if (id.hasValue (Integer.MIN_VALUE)) throw new IllegalStateException ("Ran out of unique IDs!");

    return id;
  }

  /**
   * Resets the internal ID tick to its initial, minimum value.
   */
  public static void reset ()
  {
    globallyUniqueIdValue = createAtomicIdValue ();
  }

  /**
   * Sets the internal ID tick to the given value. This method is provided for testing purposes.
   *
   * @param newValue
   *          the new value that the internal global ID tick should be set to.
   */
  static void setInternalTickValue (final int newValue)
  {
    globallyUniqueIdValue.set (newValue);
  }

  private IdGenerator ()
  {
    Classes.instantiationNotAllowed ();
  }
}
