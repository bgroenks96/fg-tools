plugins {
  // id "net.researchgate.release" version "2.3.5"
  id "com.github.ben-manes.versions"
  id "net.saliman.cobertura" version "2.3.0"
  id "com.github.kt3k.coveralls" version "2.6.0"
}

// coveralls plugin depends on xml format report
cobertura.coverageFormats = ['html', 'xml']

task createWrapper (type: Wrapper) {
  gradleVersion = "2.10"
}

allprojects {
  apply plugin: "idea"
  apply plugin: "eclipse"
  apply plugin: "java"

  group = projectGroup
  version = projectVersion

  sourceCompatibility = projectSourceCompatibility
  targetCompatibility = projectTargetCompatibility

  repositories {
    jcenter ()
    mavenCentral ()
  }
}

subprojects {
  apply plugin: "maven"

  configurations {
    deployerJars
  }

  dependencies {
    deployerJars "org.apache.maven.wagon:wagon-http:2.2"
  }

  tasks.withType (Jar) {
    archivesBaseName = "$rootProject.name-$project.name"
  }

  task sourcesJar (type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
  }

  task javadocJar (type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    javadoc.options.links ("http://docs.oracle.com/javase/7/docs/api/");
    from javadoc.destinationDir
  }

  artifacts {
    archives sourcesJar
    archives javadocJar
  }

  uploadArchives {
    repositories.mavenDeployer {
      configuration = configurations.deployerJars
      // check for snapshot or release
      def repoUrl = ""
      if (project.version.endsWith("-SNAPSHOT")) {
        repoUrl = "http://ci.forerunnergames.com:9090/repository/snapshots/"
      } else {
        repoUrl = "http://ci.forerunnergames.com:9090/repository/releases/"
      }
      repository(url: repoUrl) {
        // note: must have 'fgRepoUser' and 'fgRepoPass' loaded as properties
        def user = ""
        def pass = ""
        if (project.hasProperty("fgRepoUser")) {
          user = fgRepoUser
        }
        if (project.hasProperty("fgRepoPass")) {
          pass = fgRepoPass
        }
        authentication(userName: user, password: pass)
      }
    }
  }
}

project (":common") {
  dependencies {
    compile "com.google.guava:guava:19.0"
    compile "org.apache.commons:commons-lang3:3.4"
    compile "com.google.code.findbugs:jsr305:3.0.1"
    compile "org.slf4j:slf4j-api:1.7.13"
    testCompile "org.hamcrest:hamcrest-all:1.3"
    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-core:1.9.5"
    testRuntime "ch.qos.logback:logback-classic:1.1.3"
  }
}

project (":net") {
  dependencies {
    compile project (":common")
  }
}

if (JavaVersion.current ().isJava8Compatible ()) {
  allprojects {
    tasks.withType (Javadoc) {
      options.addStringOption ("Xdoclint:none", "-quiet")
    }
  }
}

idea {
  project {
    languageLevel = "${projectSourceCompatibility}"
  }

  module {
    downloadJavadoc = true
    downloadSources = true
  }
}

tasks.eclipse.doLast {
  delete ".project"
}
