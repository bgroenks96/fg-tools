plugins {
  id "com.jfrog.artifactory" version "4.0.0"
  id "com.jfrog.bintray" version "1.6"
  id "net.researchgate.release" version "2.3.4"
  id "com.github.ben-manes.versions" version "0.11.3"
  id "com.github.kt3k.coveralls" version "2.6.3"
}

allprojects {
  repositories {
    jcenter ()
    mavenCentral ()
  }

  apply plugin: "com.jfrog.artifactory"
  apply plugin: "com.jfrog.bintray"
  apply plugin: "net.researchgate.release"
  apply plugin: "com.github.kt3k.coveralls"
  apply plugin: "jacoco"
  apply plugin: "java"
  apply plugin: "idea"
  apply plugin: "eclipse"

  [compileJava, compileTestJava]*.options*.encoding = "UTF-8"

  sourceCompatibility = projectSourceCompatibility
  targetCompatibility = projectTargetCompatibility

  group = projectGroup
  version = projectVersion
  status = projectVersion.endsWith ("-SNAPSHOT") ? "integration" : "release"
}

rootProject.jar.enabled = false
rootProject.artifactoryPublish.skip = true
rootProject.bintrayUpload.enabled = false

subprojects {
  apply plugin: "maven"

  configurations {
    published
    testArtifacts
  }

  manifest {
    attributes "provider": "gradle"
  }

  tasks.withType (Jar) {
    archivesBaseName = "$rootProject.name-$project.name"
  }

  task sourceJar (type: Jar) {
    classifier = "sources"
    from sourceSets.main.allSource
  }

  task javadocJar (type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    javadoc.options.links ("http://docs.oracle.com/javase/7/docs/api/");
    from javadoc.destinationDir
  }

  artifactoryPublish {
    dependsOn sourceJar, javadocJar
  }

  tasks.withType (Test) {
    rootProject.testReport.reportOn it
    it.dependsOn ("jar")

    // ensure tasks don't overwrite the default report directories used by the 'test' task
    reports.html.destination = "${buildDir}/reports/${name}"
    reports.junitXml.destination = "${buildDir}/reports/${name}/results"
    binResultsDir = file ("${buildDir}/reports/${name}/results/binary/${name}")
  }

  task testJar (type: Jar, group: "Build") {
    description = "Assembles a jar archive containing the test classes."
    baseName = "${archivesBaseName}-test"
    from sourceSets.test.output
  }

  test {
    beforeTest { desc ->
      logger.quiet ("Running test: " + desc)
    }

    afterTest { desc, result ->
      if (result.resultType == TestResult.ResultType.FAILURE) {
        logger.quiet ("Failed test ${desc.name} [${desc.className}] with exception: ${result.exception}")
        if (result.exception != null) {
          result.exception.printStackTrace ()
        }
      }
    }

    testLogging.showStandardStreams = true;
  }

  artifacts {
    published sourceJar
    published javadocJar
    testArtifacts testJar
  }
}

configurations {
  published
}

artifactory {
  contextUrl = "http://oss.jfrog.org/artifactory"
  publish {
    repository {
      repoKey = "oss-snapshot-local"
      username = hasProperty ("bintrayUser") ? bintrayUser : System.getenv ("BINTRAY_USER")
      password = hasProperty ("bintrayApiKey") ? bintrayApiKey : System.getenv ("BINTRAY_API_KEY")
      maven = true
    }
    defaults {
      publishConfigs ("archives", "published")
      publishPom = true
      publishIvy = false
    }
  }
  clientConfig.includeEnvVars = true
  if (System.getenv ("TRAVIS")) {
    clientConfig.info.buildNumber = System.getenv ("TRAVIS_BUILD_NUMBER")
    clientConfig.info.vcsRevision = System.getenv ("TRAVIS_COMMIT")
  }
  resolve {
    repository {
      repoKey = "jcenter"
      username = hasProperty ("bintrayUser") ? bintrayUser : System.getenv ("BINTRAY_USER")
      password = hasProperty ("bintrayApiKey") ? bintrayApiKey : System.getenv ("BINTRAY_API_KEY")
      maven = true
    }
  }
}

bintray {
  user = hasProperty ("bintrayUser") ? bintrayUser : System.getenv ("BINTRAY_USER")
  key = hasProperty ("bintrayApiKey") ? bintrayApiKey : System.getenv ("BINTRAY_API_KEY")
  configurations = ["published", "archives"]
  pkg {
    repo = "repository"
    name = "fg-tools"
    desc = "Simple utility library for Java game development"
    userOrg = "forerunnergames"
    websiteUrl = "https://github.com/forerunnergames/fg-tools"
    issueTrackerUrl = "https://github.com/forerunnergames/fg-tools/issues"
    vcsUrl = "https://github.com/forerunnergames/fg-tools.git"
    licenses = ["MIT"]
    publicDownloadNumbers = true
  }
}

release {
  failOnCommitNeeded = true
  failOnPublishNeeded = true
  failOnSnapshotDependencies = true
  failOnUnversionedFiles = true
  failOnUpdateNeeded = true
  revertOnFail = true
  git {
    requireBranch = "master"
    pushToRemote = "origin"
  }
}

project (":common") {
  dependencies {
    compile "com.google.guava:guava:19.0"
    compile "org.apache.commons:commons-lang3:3.4"
    compile "com.google.code.findbugs:jsr305:3.0.1"
    compile "org.slf4j:slf4j-api:1.7.13"

    testCompile "org.hamcrest:hamcrest-all:1.3"
    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-core:1.9.5"
    testRuntime "ch.qos.logback:logback-classic:1.1.3"
  }
}

project (":net") {
  dependencies {
    compile project (":common")

    testCompile "org.hamcrest:hamcrest-all:1.3"
    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-core:1.9.5"
    testRuntime "ch.qos.logback:logback-classic:1.1.3"
  }
}

task jacocoRootReport (type: JacocoReport, group: "Coverage reports") {
  description = "Generates an aggregate report from all subprojects"
  dependsOn (subprojects.test)

  additionalSourceDirs = files (subprojects.sourceSets.main.allSource.srcDirs)
  sourceDirectories = files (subprojects.sourceSets.main.allSource.srcDirs)
  classDirectories = files (subprojects.sourceSets.main.output)
  executionData = files (subprojects.jacocoTestReport.executionData)

  reports {
    html.enabled = true // human readable
    xml.enabled = true // required by coveralls
  }

  doFirst {
    executionData = files (executionData.findAll { it.exists () })
  }
}

coveralls {
  sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten ()
  jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
  group = "Coverage reports"
  description = "Uploads the aggregated coverage report to Coveralls"
  dependsOn jacocoRootReport
  onlyIf { System.env."CI" }
}

task wrapper (type: Wrapper) {
  gradleVersion = "2.10"
}

tasks.artifactoryPublish.doFirst {
  assert project.status == "integration": "Only a snapshot version (not ${project.version}) can be published to Artifactory."
}

tasks.bintrayUpload.doFirst {
  assert project.status == "release": "Only a release version (not ${project.version}) can be published to Bintray."
}

createReleaseTag.dependsOn bintrayUpload

if (JavaVersion.current ().isJava8Compatible ()) {
  allprojects {
    tasks.withType (Javadoc) {
      options.addStringOption ("Xdoclint:none", "-quiet")
    }
  }
}

idea {
  project {
    languageLevel = "${projectSourceCompatibility}"
  }

  module {
    downloadJavadoc = true
    downloadSources = true
  }
}

tasks.eclipse.doLast {
  delete ".project"
}
